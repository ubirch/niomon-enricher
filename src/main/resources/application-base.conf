niomon-enricher {
  health-check {
    enabled = true
    port = 8888
    port = ${?HEALTHCHECK_PORT}
  }

  kafka {
    url = ${KAFKA_URL}
    topic {
      incoming = [${KAFKA_TOPIC_IN}]
      outgoing {
        default = ${KAFKA_TOPIC_OUT_DEFAULT}
      }
      error = ${KAFKA_TOPIC_OUT_ERROR}
    }
  }

  cumulocity {
    baseUrl = ${C8Y_BASEURL}
    tenant = ${C8Y_TENANT}
    username = ${C8Y_USERNAME}
    password = ${C8Y_PASSWORD}
  }

  ubirch-device-info-url = ${UBIRCH_DEVICE_INFO_URL}

  device-cache {
    timeToLive = 3 hours
    maxIdleTime = 0 s
  }
}

prometheus {
  port: 4321
  port: ${?PROMETHEUS_PORT}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  kafka {
    committer {
      # Maximum number of messages in a single commit batch
      max-batch = 500
      # Maximum interval between commits
      #max-interval = 10s
      # Parallelsim for async committing
      parallelism = 1
    }
  }
}

redisson {
  main {
    singleServerConfig {
      address = "redis://"${REDIS_MASTER_URL}
      clientName = "niomon-enricher"
      password = ${REDIS_PASSWORD}
    }
  }
  fallbacks = [
    {
      replicatedServersConfig {
        nodeAddresses = [
          "redis://"${REDIS_MASTER_URL},
          "redis://"${REDIS_SLAVE_URL}
        ]
        clientName = "niomon-enricher"
        password = ${REDIS_PASSWORD}
      }
    }
  ]
}

token {
  env: dev
  tokenPublicKey: "2e09fc73de8b067c4c38292e8d683ed3abaef220c9b8a6b85935a055359139a70f17b2e76543518a113fba84863db6060bb0224fc45104ca0ac8a8279b0d744a"
  issuer: "https://token."${token.env}".ubirch.com"
  audience: "https://niomon."${token.env}".ubirch.com"
  tokenManager: token.issuer
  scopes: ["upp:anchor"],
  secret: "baO4L74O4SZE-B7LqicyRUZPFcyn5NeypcB5L438bXuzaKMX2CrWFwtH9"
}
